package com.github.sdnwiselab.sdnwise.cooja;
/** 
     * This class represent a dataset of 288 values
     * (1 value every 5 minutes per hour), which represent the solar irradiance,
     * 
     * It utilizes a index of days and values to access the dataset,
     * which is incremented by 1 (max 3) after all values are used.
     * 
     * The dataset is a 2D array of values in microWatts per square meter.
     * It has a method to get the value of the dataset, converting it to
     * microCoulombs per second.
*/

public class SolarTrace {
    private static double currentInCoulomb;
    private static double[][] SolarTraceInMW = {
        //values in microwatt/cm2, each line is a day and each day has 288 values
        { //day 1 (line 1)
        //0hsquare meter
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        //5h
        3.44600, 3.91900, 4.03200, 4.16100, 4.27100, 4.37800, 4.50400, 4.60100, 4.72200, 4.83900, 4.94100, 5.01900,
        5.08500, 5.17600, 5.26400, 5.36500, 5.50300, 5.63500, 5.76600, 5.88500, 5.99900, 6.16700, 6.32500, 6.48700,
        6.67500, 6.89100, 7.03200, 7.18200, 7.32900, 7.47500, 7.81300, 8.18800, 8.54300, 8.85300, 9.19600, 9.70900,
        10.4750, 11.1640, 12.0490, 12.8680, 13.4490, 14.0940, 14.8140, 15.5170, 16.3000, 17.1300, 17.8360, 18.8690,
        19.8140, 20.8340, 22.2980, 23.9620, 26.2310, 29.1240, 29.4660, 29.7230, 31.2160, 33.0220, 44.5310, 58.4630,
        63.7950, 69.6840, 74.3710, 77.7260, 79.0180, 83.4530, 90.4870, 94.8200, 96.8620, 102.699, 104.869, 106.446,
        107.306, 112.685, 112.272, 114.093, 114.658, 112.891, 109.345, 113.340, 110.982, 110.040, 108.343, 105.264,
        //12h
        106.335, 105.734, 101.711, 96.1780, 91.7850, 90.6240, 84.1330, 82.0660, 65.3200, 41.4430, 40.1870, 39.0140,
        38.1650, 36.0240, 34.9130, 32.7790, 13.6620, 11.1680, 11.5910, 22.9870, 31.1010, 29.7200, 29.9680, 29.0450,
        20.4290, 17.7210, 15.5560, 11.9170, 13.3210, 11.3230, 9.92900, 18.0490, 12.1920, 12.9460, 9.59900, 8.25900,
        7.51500, 6.31900, 6.46000, 7.37800, 8.09500, 7.44500, 7.31700, 7.44600, 6.23300, 5.95200, 5.72200, 5.32000,
        4.54200, 3.97700, 3.35500, 2.85900, 2.21500, 1.58900, 1.19700, 0.879000, 0.652000, 0.476000, 0.327000, 0.215000,
        0.135000, 0.0770000, 0.0460000, 0.0290000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000,
        //18h
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //23h
    },
    { //day 2 (line 3)
        //0h
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        //5h
        3.47500, 3.95500, 4.06500, 4.17000, 4.29600, 4.40900, 4.51500, 4.63700, 4.76900, 4.89200, 5.02800, 5.15100,
        5.27200, 5.39900, 5.53600, 5.68600, 5.84200, 5.97900, 6.14700, 6.30500, 6.46800, 6.61200, 14.4990, 34.5380,
        36.3770, 36.8000, 37.0440, 37.2950, 37.5820, 37.8170, 38.2620, 38.5770, 38.8720, 39.1780, 39.4200, 40.0010,
        40.7520, 41.4990, 42.2960, 42.9990, 43.5160, 44.1250, 44.8840, 45.6050, 46.3520, 47.1930, 48.0090, 49.1830,
        50.0870, 51.4510, 52.8430, 54.8290, 57.3600, 59.9300, 60.6740, 61.4150, 62.5300, 65.0110, 77.4480, 62.8320,
        64.9890, 69.3690, 70.9540, 75.5660, 78.6610, 80.0030, 79.8430, 67.1080, 89.1150, 95.7980, 59.6140, 110.237,
        134.189, 133.930, 135.260, 118.300, 128.590, 112.173, 131.503, 137.388, 135.969, 136.860, 131.687, 132.393,
        //12h
        131.045, 110.777, 125.329, 119.970, 119.051, 117.082, 110.402, 99.1970, 60.0670, 53.8000, 39.5600, 38.4320,
        37.2090, 36.0390, 34.3880, 33.8140, 32.5160, 32.0010, 30.8090, 30.1710, 45.3790, 56.3600, 55.3590, 54.0930,
        52.8930, 44.4510, 22.2310, 21.9850, 20.9410, 18.8330, 17.8600, 16.8850, 16.5220, 16.4060, 15.2230, 14.3760,
        13.5850, 12.9100, 11.7440, 10.8610, 9.95500, 9.09100, 8.05900, 7.16800, 6.52100, 6.20900, 5.39600, 4.72100,
        4.08000, 3.61900, 3.08800, 2.60800, 2.09900, 1.73400, 1.33800, 0.936000, 0.637000, 0.432000, 0.282000, 0.177000,
        0.102000, 0.0560000, 0.0340000, 0.0240000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000,
        //18h
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //23h
    },
    { //day 3 (line 7)
        //0h
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        //5h
        2.93100, 3.03200, 3.29600, 3.54700, 3.72000, 3.80400, 3.94500, 4.20400, 4.34400, 4.55500, 4.61100, 5.01600,
        5.26800, 5.52200, 6.02700, 7.12700, 7.59500, 9.35700, 9.07400, 9.52700, 11.0140, 9.94300, 8.30800, 8.28900,
        9.26700, 8.29100, 10.0090, 11.4860, 12.5930, 11.5770, 12.6680, 10.9970, 9.78500, 11.2680, 8.63900, 8.19500,
        9.18300, 11.7880, 10.1870, 10.4240, 18.1490, 10.6660, 10.1500, 17.0500, 17.7660, 16.5380, 15.5860, 19.0900,
        19.5810, 15.6390, 18.7410, 17.9720, 39.6000, 46.4850, 51.1670, 59.6060, 59.0740, 55.3940, 52.3910, 46.2760,
        77.6070, 42.6040, 39.4900, 49.0770, 110.777, 74.8430, 117.229, 108.166, 133.054, 83.3080, 137.383, 124.719,
        100.066, 146.945, 139.908, 132.250, 148.325, 102.232, 110.173, 132.368, 101.863, 94.0110, 148.017, 143.255,
        //12h
        117.656, 138.691, 123.829, 135.048, 132.681, 129.661, 128.651, 74.8790, 73.1840, 37.9190, 34.8550, 12.9120,
        11.0700, 1.29100, 0.226000, 0.203000, 0.330000, 0.834000, 3.56500, 5.32700, 15.2390, 23.5850, 4.62200, 3.63700,
        3.03000, 3.43000, 6.40900, 4.62800, 5.12200, 6.35300, 4.07400, 4.43400, 4.26500, 3.73800, 4.41000, 6.11400,
        4.78100, 3.26500, 3.30300, 3.92900, 3.98700, 3.29000, 2.76600, 2.37000, 1.94200, 1.75800, 1.38300, 1.00200,
        0.690000, 0.329000, 0.167000, 0.106000, 0.106000, 0.132000, 0.141000, 0.109000, 0.148000, 0.123000, 0.0870000, 0.0420000,
        0.0300000, 0.0230000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000, 0.0200000,
        //18h
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //23h
    }};

    //return the value of solar trace in mC 
    public static double getSolarTraceValue(int cicle, int step) {
        //calculate the current in coulombs (current * time), time is 5 minutes in seconds
        currentInCoulomb = calculateCurrent(cicle, step) * 300;
        return currentInCoulomb;
    }

    //calcuate the current (solar trace value * solar panel efficiency * voltage * panel area)
    public static double calculateCurrent(int cicle, int step) {
        double solarPanelEfficiency = 0.2;
        double voltage = 0.2;
        double panelArea = 210;

        return (SolarTraceInMW[cicle][step] * solarPanelEfficiency * voltage * panelArea);
    }
}
